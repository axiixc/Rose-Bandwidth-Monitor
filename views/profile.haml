- if @profile_user.nil?
    .container.notification.error
        %p Invalid Username or API Token

- else
    - report = @profile_user.report_with_name :basic
    - usage = @profile_user.current_usage

    - if @profile_user != @session_user && !@profile_using_api_token
        .container.notification.message
            %p= "Bandwidth usage for #{@profile_user.display_name}"
    - elsif @profile_user == @session_user && @profile_standalone_layout
        .container.notification.message
            %p This is your bandwidth usage
    
    - if usage.nil?
        .container.notification.error
            %p
                No bandwidth usage data has been collected.
                %input#force_scrape{:type => :button, :value => "Scrape Now"}
    - else
        .container
            %h1
                Usage
                %span.capsule{:class => usage.bandwidth_class == 0 ? :c_green : :g_red}= usage.bandwidth_class_string.capitalize
            .content
                %label.primary
                    Policy
                    .label_appendage= "#{usage.policy_received_string} &#x25bc;<span style='color: #777;'>&#x25b2; #{usage.policy_sent_string}</span>"
                %label.secondary
                    Actual
                    .label_appendage= "#{usage.actual_received_string} &#x25bc;<span style='color: #777;'>&#x25b2; #{usage.actual_sent_string}</span>"
                #chart_container.primary
                    #chart_div
                        %table{:style => "width: 100%; height: 100%;"}
                            %tr
                                %td.loading{:valign => :middle} Loading Chart Data...
                - if @profile_user == @session_user
                    %input#force_scrape{:type => :button, :value => "Scrape Now"}
                    %span.form_appendage= "last updated #{usage.data_age}"
                - else
                    %label.final= "updated #{usage.data_age}"

    :javascript
        // jQuery function, called when page load is complete
        $(document).ready(function() {
            // when the window is resized, redraw the graph to the new size
            $(window).bind("resize", function(event) {
                if ($('#chart_div').width() != $('#chart_div').children()[0].width)
                    drawChart();
            });	

            $('#force_scrape').bind("click", function(event) {
                $('#force_scrape').attr('disabled', 'disabled');
                $('#force_scrape').attr('value', 'Hold on...');
                $.ajax({
                    type: "POST",
                    url: "#{url('/force_scrape')}",
                    success: function() { location.reload(); },
                    error: function() { location.reload(); }
                });
            });
        });

        google.load("visualization", "1", {packages:["corechart"]});
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Timestamp');
            data.addColumn('number', 'Total');
            #{report[:devices].map{ |device| "data.addColumn('number', '#{device[:display_name]}');" }.join ' '}
            data.addRows(#{ report[:rows].to_json });

            var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));
            chart.draw(data, {
                legend: 'bottom', 
                backgroundColor: '#FCFCFC',
                areaOpacity: 1 / data.getNumberOfColumns(),
                hAxis: { textPosition: 'none', direction: -1 }, 
                vAxis: { minValue: 0, format: "#,### MB", textPosition: 'in' }, 
                chartArea: { top: 0, left: 0, height: "85%", width: "100%" }
            });
        }