- scrape_button_value = 'Scrape Now'
- if @profile_user.nil?
    .container.notification.error
        %p Invalid Username or API Token

- else
    - usage = @profile_user.current_usage

    - if @profile_user != @session_user && !@profile_using_api_token
        .container.notification.message
            %p= "Bandwidth usage for #{@profile_user.display_name}"
    - elsif @profile_user == @session_user && @profile_standalone_layout
        .container.notification.message
            %p This is your bandwidth usage
    
    - if usage.nil?
        .container.notification.error
            %p
                No bandwidth usage data has been collected.
                %input#force_scrape{:type => :button, :value => "Scrape Now"}
    - else
        .container
            %h1
                Usage
                %span.capsule{:class => usage.bandwidth_class == 0 ? :c_green : :g_red}= usage.bandwidth_class_string.capitalize
            .content
                %label.primary
                    Policy
                    .label_appendage= "#{usage.policy_received_string} &#x25bc;<span style='color: #777;'>&#x25b2; #{usage.policy_sent_string}</span>"
                %label.secondary
                    Actual
                    .label_appendage= "#{usage.actual_received_string} &#x25bc;<span style='color: #777;'>&#x25b2; #{usage.actual_sent_string}</span>"
                #chart_container.primary
                    #chart_div
                        %table{:style => "width: 100%; height: 100%;"}
                            %tr
                                %td.loading{:valign => :middle}
                                    .spinner{ :style => 'height: 1.3em; width: 1.3em; margin-bottom: -0.4em;' }
                                        - (1..12).each do |i|
                                            %div{ :class => "bar#{i}" }
                                    Loading Chart Data...
                - if @profile_user == @session_user
                    %input#force_scrape{:type => :button, :value => scrape_button_value}
                    %span.form_appendage= "last updated #{usage.data_age}"
                - else
                    %label.final= "updated #{usage.data_age}"

    :javascript
        var chartData = null;
        function redrawChart(rawChartData)
        {
            if (rawChartData && google.visualization)
            {
                chartData = new google.visualization.DataTable();
                
                chartData.addColumn('string', 'Timestamp');
                chartData.addColumn('number', 'Policy Down');
                chartData.addColumn('number', 'Policy Up');
                
                var idx, len = rawChartData.devices.length;
                for (idx = 0; idx < len; idx++) {
                    chartData.addColumn('number', rawChartData.devices[idx].display_name);
                }
                chartData.addRows(rawChartData.rows);
            }
            
            if (!chartData) {
                return;
            }
            
            var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));
            if (!chart) {
                return;
            }
            
            chart.draw(chartData, {
                legend: 'bottom', 
                backgroundColor: '#FCFCFC',
                areaOpacity: 1 / chartData.getNumberOfColumns(),
                hAxis: { textPosition: 'none', direction: -1 }, 
                vAxis: { minValue: 0, format: "#,### MB", textPosition: 'in' }, 
                chartArea: { top: 0, left: 0, height: "85%", width: "100%" }
            });
        }
    
        // jQuery function, called when page load is complete
        google.load('visualization', '1', {packages:["corechart"]});
        google.setOnLoadCallback(function() {
            $.ajax('/_api/report', {
                success: function(data) {
                    redrawChart(JSON.parse(data));
                },
                error: function() {
                    var msgNode = $('#chart_div .loading')
                    if (msgNode) {
                        msgNode.text('Error Loading Chart Data');
                    }
                }
            });
        });
        
        $(document).ready(function() {
            // when the window is resized, redraw the graph to the new size
            $(window).bind("resize", function(event) {
                if ($('#chart_div').width() != $('#chart_div').children()[0].width)
                    redrawChart();
            });	
        
            var scrapeButton = $('#force_scrape');
            scrapeButton.bind('click', function(event) {
                scrapeButton.attr('disabled', true);
                scrapeButton.attr('value', 'Hold on...');
                $.ajax({
                    url: '/_api/report?scrape_first',
                    success: function(data) {
                        redrawChart(JSON.parse(data));
                        scrapeButton.attr('disabled', false);
                        scrapeButton.attr('value', '#{scrape_button_value}');
                    },
                    error: function() {
                        scrapeButton.attr('disabled', false);
                        scrapeButton.attr('value', 'Error: Scrape Failed');
                    }
                });
            });
        });