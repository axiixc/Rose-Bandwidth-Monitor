- report = Rose::Reports.basic(@session_user)
- text_enabled = 'Enabled'
- text_disabled = 'Disabled'

:javascript
    function toggleNotifications(index) {
        enabled = $("input[name='enabled[" + index + "]']");
        enabled_b = (enabled.val() == '');
        enabled.val(enabled_b ? 'true' : '');
        
        toggle = $("input[name='toggle_notifications[" + index + "]']");
        toggle.val(enabled_b ? '#{text_enabled}' : '#{text_disabled}');
        
        if (!enabled_b) {
            toggle.removeClass('c_green');
            toggle.addClass('c_red');
        }
        else {
            toggle.addClass('c_green');
            toggle.removeClass('c_red');
        }
    }

- @profile_user = @session_user
= haml :profile

.container
    %h1 Notifications
    .content
        %form{:action => url("/settings/notifications"), :method => :post}
            %label.primary{:key => :warn_level}
                Warn Level (MB)
                %input{:type => :text, :id => :warn_level, :name => :warn_level, :value => '%.0f' % @session_user.notification_warn_level}
            - Rose::User.notification_providers.each_with_index do |provider_id, provider_index|
            - provider_name = Rose::User.notification_provider_name_with_id(provider_id)
            - provider = @session_user.notification_providers.first(:provider_id => provider_id)
            - provider_enabled = !provider.nil? && provider.enabled
                .form_group
                    %input{:type => :hidden, :name => "provider_id[#{provider_index}]", :value => provider_id}
                    %input{:type => :hidden, :name => "enabled[#{provider_index}]", :value => provider_enabled ? :true : ''}
                    %h2
                        = provider_name
                        %input.notification_toggle{:type => :button, :class => provider_enabled ? :c_green : :c_red, :value => provider_enabled ? text_enabled : text_disabled, :name => "toggle_notifications[#{provider_index}]", :onclick => "toggleNotifications(#{provider_index});", :title => "Toggle this notification service enabled or disabled"}
                    - o_label_polarity = false
                    - Rose::User.notification_provider_class_with_id(provider_id).configuration_options.each do |opt|
                        - o_label_class = (o_label_polarity = !o_label_polarity) ? 'primary' : 'secondary'
                        - o_name = "#{opt[:name]}[#{provider_index}]"
                        %label{:class => o_label_class, :name => o_name}
                            - case opt[:type]
                            - when :text, :password
                                = opt[:label]
                                %input{:type => opt[:type], :id => o_name, :name => o_name, :value => provider.nil? ? "" : provider.user_configuration[opt[:name]]}
                            - when :checkbox
                                - checked = provider.nil? ? (opt[:default].nil? ? false : opt[:default]) : provider.user_configuration[opt[:name]]
                                %input{:type => :checkbox, :id => o_name, :name => o_name, :value => opt[:name], :checked => checked}
                                = opt[:label]
            %input{:type => :submit, :value => "Update Notifications"}
            %span.form_appendage
                or
                %input{:type => :submit, :name => :disable_notifications, :value => "disable them"}

- devices = @session_user.devices
.container
    %h1
        Devices
        %span.capsule= devices.size == 0 ? "No Devices" : "#{devices.size} Devices"
    .content
        %form{:action => url("/settings/devices"), :method => :post}
            - d_label_polarity = false
            - devices.each do |device|
                - d_label_class = (d_label_polarity = !d_label_polarity) ? 'primary' : 'secondary'
                %input{:type => :hidden, :name => 'network_address[]', :value => device.network_address}
                %label{:class => d_label_class, :name => 'preferred_name[]'}
                    %input{:type => :text, :name => 'preferred_name[]', :id => 'preferred_name[]', :value => device.preferred_name, :placeholder => device.display_name}
                    - if device.host.empty?
                        %span{:style => "color: #999;"} Untitled Device
                    - else
                        = device.host
                    %br
                    %code= device.network_address
            %input{:type => :submit, :value => "Update Devices"}
            %span.form_appendage
                or
                %input{:type => :submit, :name => :clear_custom_titles, :value => "clear custom titles"}

.container
    %h1 Account
    .content
        %form{:action => url("/settings/profile"), :method => :post}
            - url = url("/profile/#{@session_user.protected_stats_token}")
            %label.primary{:key => :public_stats}
                %input{:type => :checkbox, :name => :public_stats, :value => :public_stats, :checked => @session_user.public_stats, :id => :public_stats}
                Allow others to view my bandwidth usage (
                %a{:href => url('/profile/' + @session_user.username)}> preview
                )
            %label.secondary
                Bandwidth stats token:
                %code{:style => 'word-wrap: break-word;'}= @session_user.protected_stats_token
            %p.primary
                For quick access to your bandwidth usage without logging in, bookmark this link
                %a{:href => url, :style => 'word-wrap: break-word;'}= url
                
            %input{:type => :submit, :value => "Update Account"}
            %span.form_appendage
                or
                %input{:type => :submit, :name => :reset_protected_stats_token, :value => "reset bandwidth token"}

.container
    %h1 Password
    .content
        %form{:action => url("/settings/password"), :method => :post}
            %label.primary{:key => :current_password}
                Current Password
                %input{:type => :password, :id => :current_password, :name => :current_password}
            %label.secondary{:key => :new_password}
                New Password
                %input{:type => :password, :id => :new_password, :name => :new_password}
            %label.primary{:key => :new_password_confirm}
                Confirm Password
                %input{:type => :password, :id => :new_password_confirm, :name => :new_password_confirm}
            %input{:type => :submit, :value => "Update Password"}
            
.container
    %h1
        Bandwidth
        %span.capsule= "#{@session_user.bandwidth_entries.count} Entries"
    .content
        %table.primary{:style => "width: 100%;"}
            - entry = @session_user.bandwidth_entries.first(:order => [ :timestamp.desc ])
            - if not entry.nil?
                %tr
                    %td.b Bandwidth Class
                    %td= entry.bandwidth_class_string.capitalize
                %tr
                    %td.b Policy Received
                    %td= entry.policy_received_string
                %tr
                    %td.b Policy Sent
                    %td= entry.policy_sent_string
                %tr
                    %td.b Actual Received
                    %td= entry.actual_received_string
                %tr
                    %td.b Actual Sent
                    %td= entry.actual_sent_string
                %tr
                    %td.b Timestamp
                    %td= entry.timestamp.strftime "%a %b %e at %l:%M.%S %P"
            - else
                %tr
                    %td.c No Data
        %input#force_scrape{:type => :button, :value => "Force Scrape"}