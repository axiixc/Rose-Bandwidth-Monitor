.container
    - require 'reports'
    - report = Rose::Reports.basic(@session_user)
    :javascript
        // jQuery function, called when page load is complete
        $(document).ready(function() {
            // when the window is resized, redraw the graph to the new size
            $(window).bind("resize", function(event) {
                if ($('#chart_div').width() != $('#chart_div').children()[0].width) {
                    drawChart();
                }
            });	
            
            $('#force_scrape').bind("click", function(event) {
                $('#force_scrape').attr('disabled', 'disabled');
                $('#force_scrape').attr('value', 'Hold on...');
                $.ajax({
                    type: "POST",
                    url: "#{url('/force_scrape')}",
                    success: function(msg) {
                        location.reload();
                    },
                    error: function() {
                        location.reload();
                    }
                });
            });
        });
        
        google.load("visualization", "1", {packages:["corechart"]});
        google.setOnLoadCallback(drawChart);
        function drawChart() {
            var data = new google.visualization.DataTable();
            data.addColumn('string', 'Timestamp');
            data.addColumn('number', 'Total');
            #{report[:devices].map{ |device| "data.addColumn('number', '#{device[:host].empty? ? device[:network_address] : device[:host]}');" }.join ' '}
            data.addRows(#{ report[:rows].to_json });
                
            var chart = new google.visualization.AreaChart(document.getElementById('chart_div'));
            chart.draw(data, {
                height: 300, 
                legend: 'bottom', 
                areaOpacity: 1 / data.getNumberOfColumns(),
                hAxis: {
                    textPosition: 'none',
                    direction: -1
                }, 
                vAxis: {
                    minValue: 0,
                    format: "#,### MB", 
                    textPosition: 'in'
                }, 
                chartArea: {
                    top: 0, 
                    left: 0, 
                    height: "85%", 
                    width: "100%"
                }
            });
        }
    %h1
        Usage
        %span.capsule= "Past %.0f Hours" % [ report[:metadata][:time_difference] / 60 / 60 ]
    .content#chart_container{:style => "padding: 3% 3% 0 3%;"}
        #chart_div

.container
    %h1
        Notifications
        %span.capsule{:style => "color: #{@session_user.notification_enabled ? 'green' : '#800000'};"}= @session_user.notification_enabled ? 'Enabled' : 'Disabled'
    .content
        %form{:action => url("/settings/notifications"), :method => :post}
            %label.primary{:key => :email}
                Boxcar Email
                %input{:type => :text, :id => :email, :name => :email, :value => @session_user.notification_boxcar_email}
            %label.secondary{:key => :warn_level}
                Warn Level (in MB)
                %input{:type => :text, :id => :warn_level, :name => :warn_level, :value => '%.0f' % @session_user.notification_warn_level}
            %input{:type => :submit, :value => @session_user.notification_enabled ? "Update" : "Update and Enabled Notifications"}
                - if @session_user.notification_enabled
                    %span.form_appendage
                        or
                        %input{:type => :submit, :name => :disable_notifications, :value => 'disable notifications'}
.container
    %h1 Account
    .content
        %form{:action => url("/settings/profile"), :method => :post}
            %label.primary{:key => :public_stats}
                %input{:type => :checkbox, :name => :public_stats, :value => :public_stats, :checked => @session_user.public_stats, :id => :public_stats}
                Public bandwidth stats
            %label.secondary
                Bandwidth stats token:
                %code{:style => 'word-wrap: break-word;'}= @session_user.protected_stats_token
            %p.primary
                You can access your bandwidth stats without having to log in by visiting the url
                - url = url("/profile/#{@session_user.protected_stats_token}")
                %a{:href => url, :style => 'word-wrap: break-word;'}= url
                
            %input{:type => :submit, :value => "Update"}
            %span.form_appendage
                or
                %input{:type => :submit, :name => :reset_protected_stats_token, :value => "reset bandwidth token"}
.container
    %h1 Password
    .content
        %form{:action => url("/settings/password"), :method => :post}
            %label.primary{:key => :current_password}
                Current Password
                %input{:type => :password, :id => :current_password, :name => :current_password}
            %label.secondary{:key => :new_password}
                New Password
                %input{:type => :password, :id => :new_password, :name => :new_password}
            %label.primary{:key => :new_password_confirm}
                Confirm Password
                %input{:type => :password, :id => :new_password_confirm, :name => :new_password_confirm}
            %input{:type => :submit, :value => "Update"}
            
.container
    %h1
        Bandwidth
        %span.capsule= "#{@session_user.bandwidth_entries.count} Entries"
    .content
        %table.primary{:style => "width: 100%;"}
            - entry = @session_user.bandwidth_entries.first(:order => [ :timestamp.desc ])
            - if not entry.nil?
                %tr
                    %td.b Bandwidth Class
                    %td= entry.bandwidth_class_string.capitalize
                %tr
                    %td.b Policy Received
                    %td= entry.policy_received_string
                %tr
                    %td.b Policy Sent
                    %td= entry.policy_sent_string
                %tr
                    %td.b Actual Received
                    %td= entry.actual_received_string
                %tr
                    %td.b Actual Sent
                    %td= entry.actual_sent_string
                %tr
                    %td.b Timestamp
                    %td= entry.timestamp.strftime "%a %b %e at %l:%M.%S %P"
            - else
                %tr
                    %td.c No Data
        %input#force_scrape{:type => :button, :value => "Force Scrape"}